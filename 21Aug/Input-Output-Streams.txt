I/O Streams
===========

- Byte Stream (bytes)
- Character Stream (characters)
- Implements AutoCloseable } 
				&		   }- Interfaces
			 Closeable	   }
- Input Stream  }
- Output Stream }- Abstract Classes

1.) ByteStream Classes : List of classes in ByteStream are

- FileInput Stream
- FileOutput Stream
- ByteArrayInputStream
- ByteArrayOutputStream
- BufferedOutputStream
- BufferedInputStream
- PrintStream
- DataInputStream
- DataOutputStream

By Default package of all classes : 

- java.lang : No need to import this class. Already imported.

Example -> System class

i) System.in
ii) System.out
iii) System.err

Package for I/O : java.io.*

InputStream Methods :
-------------------

- int available()
- void close()
- void mark(int byte)
- int read()
- int read(byte buffer[])
- int read(byte buffer[],int offset, int numBytes)
- void reset()
- long skip(long numBytes)

OutputStream Methods :
--------------------

- void close()
- void flush()
- void write()
- void write(byte buffer[])
- void write(byte buffer[],int offset, int numBytes)


Example Code :
------------

(I)

import java.io.*

class FileInputStreamDemo{
	public static void main(String[] args){
		try{
			FileInputStream fir = new FileInputStream("./file1.txt");
			int i=0;
			while(i=fir.read()!=-1){
				System.out.print((char)i);
			}
		}
		catch(Exception e){
			System.out.print(e);
		}
	}
}


for ByteArrayOutputStream we have size() instead of available().


